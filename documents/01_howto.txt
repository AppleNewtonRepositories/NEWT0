基本的な使い方--------------  特に説明しませんが、UNIX の基本ルール（実行パス等）がわかっているものとします。  ○基本的な使い方    まずは UNIX コマンドのお約束、-h オプションで Usage が    見れます      % newt -h      Usage: newt [switches] [--] [programfile]        -t              enable trace mode           …  トレースモードで実行します        -l              dump lex info               …  字句解析時の情報表示        -s              dump syntax tree            …  構文木を表示        -b              dump byte code              …  バイトコードを表示        -C directory    change working directory    …  作業ディレクトリの変更        -e 'command'    one line of script          …  引数のスクリプトを実行        -i [symbols]    print function info         …  組込み関数の説明を表示                                                        引数がなければ全関数を表示        -v              print version number        …  バージョンを表示        -h              print this help message     …  このメッセージを表示        --copyright     print copyright             …  コピーライトを表示        --version       print version number        …  バージョンを表示（-v と同じ）    スクリプトの実行。ま、普通のスクリプト言語とほぼ同じです。      % newt ファイル名         …  スクリプトファイルを実行      % newt < ファイル名       …  標準入力から読込んで実行      % ファイル名              …  スクリプトファイルの１行目が #!newt の場合(*1)      *1) NewtonScript のコメントは /* */ と // のみですが、UNIX の #! を使えるよう          にするために、ファイルの１文字目が # のときのみその行はコメントとして扱わ          れる特別処置をしています  ○使える組込み関数      -i オプションで組込み関数の一覧が表示されます。  % newt -i        HasVariable(frame, name)        HasVar(name)        DefGlobalFn(name, fn)        DefGlobalVar(name, value)        Mod(n1, n2)        RemoveSlot(obj, slot)        Throw(name, data)        Rethrow()        CurrentException()        PrimClassOf(obj)        TotalClone(obj)        HasSubclass(sub, super)        IsSubclass(sub, super)        IsInstance(obj, class)        IsArray(obj)        IsFrame(obj)        IsSymbol(obj)        IsString(obj)        IsCharacter(obj)        IsInteger(obj)        IsReal(obj)        IsNumber(obj)        IsImmediate(obj)        IsFunction(obj)        IsReadonly(obj)        Intern(str)        MakeBinary(length, class)        SetLength(obj, len)        HasSlot(frame, slot)        GetSlot(frame, slot)        SetSlot(frame, slot, v)        GetVariable(frame, slot)        SetVariable(frame, slot, v)        GetRoot()        GetGlobals()        GC()        Compile(str)        GetGlobalFn(symbol)        GetGlobalVar(symbol)        GlobalFnExists(symbol)        GlobalVarExists(symbol)        UndefGlobalFn(symbol)        UndefGlobalVar(symbol)        Chr(integer)        Ord(char)        StrLen(str)        SubStr(str, start, count)        StrEqual(a, b)        StrExactCompare(a, b)        StrCat(str1, str2)                      …  文字を結合する（副作用あり）(*2)        SPrintObject(obj)        SymbolCompareLex(symbol1, symbol2)        P(obj)                                  …  オブジェクトを表現形でプリント。旧来の Print 関数に相当        Print(obj)                              …  オブジェクトをプリント。前後に " は出力されません(*2)        ParamStr(baseString, paramStrArray)        LoadLib(file)                           …  外部ライブラリをロード(*2)        Load(file)                              …  スクリプトファイルをロードして実行(*2)        Require(str)                            …  ライブラリを要求(*2)        GetEnv(str)                             …  環境変数を取得(*2)        FileExists(path)                        …  ファイルの存在確認(*2)        DirName(path)                           …  パスからディレクトリ名を取出す(*2)        BaseName(path)                          …  パスからファイル名を取出す(*2)        JoinPath(dir, fname)                    …  ディレクトリ名とファイル名からパスを生成(*2)        ExpandPath(path)                        …  相対パスを絶対パスに展開する(*2)        Split(str, sep)                         …  文字列を区切り文字で分割して配列を生成(*2)        DumpFn(fn)                              …  関数をダンプ表示(*3)                                                    引数が nil の場合は現在実行中の関数をダンプ表示        DumpBC(instructions)                    …  バイトコード（バイナリ）をダンプ表示(*3)        DumpStacks()                            …  VM スタックをダンプ表示(*3)        Gets()                                  …  標準入力から１行分の文字列を取得        And(n1, n2)                             …  (*4)        Or(n1, n2)                              …  (*4)        ShiftLeft(n1, n2)                       …  (*4)        ShiftRight(n1, n2)                      …  (*4)        ObjectEqual(obj1, obj2)                 …  (*4)        DefMagicPointer(mp, value)              …  (*4)        MakeRegex(pattern, opt)                 …  (*4)        Clone(obj)                              …  (*5)        ClassOf(obj)                            …  (*5)        Length(obj)                             …  (*5)      *2) 独自拡張の関数      *3) デバッグ用の関数      *4) 構文（オペレータ等）から自動的に展開される関数      *5) バイトコードに変換される関数、newt -i では表示されません      上記の関数の他にはオペレータ（演算子）が使えます。      ※見ての通りまだ言語を動作させるために最低限必要な関数のみで、使え        る関数がほとんどありません。NewtonScript の言語マニュアルの中から        組込み関数として必要な関数をリストアップする必要があります  ○外部ライブラリについて    Ｃ言語で作成した外部ライブラリが使えるようになっています。      LoadLib("samplelib.dylib");      ※絶対パスもしくは相対パスでファイル名を指定して下さい    でサンプルの外部ライブラリがロードされ以下の２つの関数が追加    されます。       GetGlobalFn(name)            …  グローバル関数の関数オブジェクトを返す       info(obj)                    …  関数オブジェクトもしくはシンボルで指定された                                        グローバル関数の説明を表示  ○Require によるライブラリ要求について    Require により外部ライブラリ(拡張子 .dylib, .so）または    ソースコード（拡張子 .newt）を一回だけロードすることができます。    一度ロードされたライブラリはロードされません。ライブラリ検索パス    によりロードするライブラリを探します。       Require("protoFILE");  ○ライブラリ検索パスについて    ライブラリは環境変数 NEWTLIB に設定された検索パスにより    検索されます。NEWTLIB  が設定されていない場合はカレントパス    および実行ファイルのあるディレクトリから検索されます。  ○初期化ライブラリについて    egg.newt がライブラリ検索パスに存在する場合、newt が起    動されたときに自動的に読込まれます。  ○グローバル変数        _EXEDIR_                                …  実行ファイルのあるディレクトリ        _ARGV_                                  …  コマンドが起動されたときの引数（コマンド名は入らない）        _ENV_                                   …  環境変数（現在は NEWTLIB のみ）が格納されることがある        _VERSION_                               …  バージョン情報        _STDOUT_                                …  標準出力（通常は NIL、文字列の場合その文字列に出力が追加される）        _STDERR_                                …  標準エラー出力（通常は NIL、文字列の場合その文字列に出力が追加される）        requires                                …  Require されたライブラリの情報  ※将来変更されることがあるかもしれません